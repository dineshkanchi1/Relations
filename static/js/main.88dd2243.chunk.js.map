{"version":3,"sources":["components/UserTable.jsx","components/Relation.jsx","components/Result.jsx","components/HomePage.jsx","components/Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["UserTable","props","userList","setUserList","useState","user","setUser","useEffect","axios","get","then","res","data","catch","err","console","log","handleSubmit","e","a","preventDefault","NotificationManager","error","post","name","setTimeout","Form","onSubmit","Control","type","onChange","target","value","placeholder","className","Button","variant","Table","striped","bordered","hover","length","map","index","Relation","username1","relation","username2","setRelation","relationList","setRelationList","handleRelation","success","handleChangeRelation","userName1","userName2","Group","controlId","Label","as","Result","userName","setUserName","result","setResult","handleChangeResult","handleResult","StatusCode","style","display","flexDirection","finalResult1","marginLeft","finalResult2","HomePage","usersTableBtn","setUsersTableBtn","relationBtn","setRelationBtn","resultBtn","setResultBtn","onClick","to","render","NavBar","Navbar","expand","backgroundColor","color","Brand","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88dd2243.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Form, Button, Table } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\n\r\nfunction UserTable(props) {\r\n  const {userList,setUserList} = props;\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n      axios\r\n      .get(\"http://localhost:8080/users\")\r\n      .then(res=>setUserList(res.data))\r\n      .catch(err=>console.log(err));\r\n  });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if(!user){\r\n      NotificationManager.error(\"Error Message\" , \"Please entre Username\")\r\n      return\r\n    }\r\n    await axios.post(`http://localhost:8080/users/add`, {\r\n      name: user,\r\n    });\r\n    setTimeout(() => {\r\n      setUser(\"\");\r\n    }, 1000);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setUser(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add User</h2>\r\n      <Form onSubmit={handleSubmit} >\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"user\"\r\n          onChange={handleChange}\r\n          placeholder=\"Add User\"\r\n          value={user}\r\n          \r\n          className=\"input-txt\"\r\n        />\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>User Name</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {userList.length !== 0\r\n            ? userList.map((user, index) => (\r\n                <tr key={index}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{user.name}</td>\r\n                </tr>\r\n              ))\r\n            : null}\r\n        </tbody>\r\n      </Table>\r\n      <NotificationContainer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserTable;\r\n","import React, { useState ,useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { Table } from \"react-bootstrap\"\r\nimport {NotificationContainer, NotificationManager } from 'react-notifications';\r\n\r\nfunction Relation(props) {\r\n  const [relation, setRelation] = useState({\r\n    username1: \"\",\r\n    relation: \"\",\r\n    username2: \"\",\r\n  });\r\n\r\n const {relationList, setRelationList} =props;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/relations\")\r\n      .then(res=>setRelationList(res.data))\r\n      .catch(err=>console.log(err));\r\n  });\r\n\r\n  const handleRelation = async (e) => {\r\n    e.preventDefault();\r\n    if(!relation.username1 || !relation.username2 || !relation.relation){\r\n        NotificationManager.error(\"Error Message\" , \"Please Fill All Fields\")\r\n        return\r\n      }\r\n    const { data } = await axios.post(\r\n      `http://localhost:8080/relations/add`,\r\n      relation\r\n    );\r\n    setTimeout(() => {\r\n      NotificationManager.success('Success message', 'Relation Added successfully');\r\n      console.log(data);\r\n      setRelation({\r\n        username1: \"\",\r\n        relation: \"\",\r\n        username2: \"\",\r\n      })\r\n    }, 1000);\r\n  };\r\n\r\n  const handleChangeRelation = (e) => {\r\n    e.preventDefault();\r\n    const value = e.target.value;\r\n    setRelation({\r\n      ...relation,\r\n      [e.target.name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Add Relation</h1>\r\n      <Form onSubmit={handleRelation} className=\"form\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"username1\"\r\n          onChange={handleChangeRelation}\r\n          placeholder=\"Add User\"\r\n          value={relation.userName1}\r\n          className=\"input-txt\"\r\n        />\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"username2\"\r\n          onChange={handleChangeRelation}\r\n          placeholder=\"Add User\"\r\n          value={relation.userName2}\r\n          className=\"input-txt\"\r\n        />\r\n        <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n          <Form.Label>Relation</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            name=\"relation\"\r\n            onChange={handleChangeRelation}\r\n          >\r\n            <option>Select</option>\r\n            <option value=\"Brother\">Brother</option>\r\n            <option value=\"Friend\">Friend</option>\r\n            <option value=\"Son\">SOn</option>\r\n            <option value=\"Grand Father\">Grand Father</option>\r\n            <option value=\"Sister\">Sister</option>\r\n            <option value=\"Mother\">Mother</option>\r\n            <option value=\"Sister\">Sister</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Relations</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {relationList.length !== 0\r\n            ? relationList.map((user, index) => (\r\n                <tr key={index}>\r\n                  <td>{`${user.username1} is ${user.relation} of ${user.username2}`}</td>\r\n                </tr>\r\n              ))\r\n            : null}\r\n        </tbody>\r\n      </Table>\r\n      <NotificationContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Relation;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport {NotificationManager} from 'react-notifications';\r\n\r\nfunction Result(props) {\r\n  const [userName, setUserName] = useState({\r\n    username1: \"\",\r\n    relation: \"\",\r\n    username2: \"\",\r\n  });\r\n\r\nconst {result,setResult}=props;\r\n  const handleChangeResult = (e) => {\r\n    e.preventDefault();\r\n    const value = e.target.value;\r\n    setUserName({\r\n      ...userName,\r\n      [e.target.name]: value,\r\n    });\r\n  };\r\n\r\n  const handleResult = async (e) => {\r\n    e.preventDefault();\r\n    console.log(userName.username2)\r\n    if(!userName.username1 || !userName.username2){\r\n        NotificationManager.error(\"Error Message\" , \"Please enter Username\")\r\n        return\r\n    }\r\n    const { data } = await axios.post(\r\n      `http://localhost:8080/relations/degree`,\r\n      userName\r\n    );\r\n    \r\n    setTimeout(() => {\r\n        if(data.StatusCode === 500){\r\n            NotificationManager.error(\"Error Message\" , \"No Relation Found\")\r\n            return\r\n        }\r\n      setResult(data);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Result</h1>\r\n      <Form onSubmit={handleResult} className=\"form\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"username1\"\r\n          onChange={handleChangeResult}\r\n          placeholder=\"User\"\r\n          value={userName.username1}\r\n          className=\"input-txt\"\r\n        />\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"username2\"\r\n          onChange={handleChangeResult}\r\n          placeholder=\"User\"\r\n          value={userName.username2}\r\n          className=\"input-txt\"\r\n        />\r\n        <Button variant=\"primary\" type=\"submit\" className=\"btn\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n        <div style={{display:\"flex\"}}>\r\n        <div style={{ display: \"flex\" ,flexDirection:\"column\" }}>\r\n        <h3>Result 1</h3>\r\n        {result !== null\r\n          ? result.finalResult1.map((res, index) => (\r\n              <h4 className=\"result\" key={index}>{res}</h4>\r\n            ))\r\n          : null}\r\n      </div>\r\n      <div style={{ display: \"flex\" ,flexDirection:\"column\" ,marginLeft:\"5px\"}}>\r\n      <h3>Result 2</h3>\r\n        {result !== null\r\n          ? result.finalResult2.map((res, index) => (\r\n              <h4 className=\"result\" key={index}>{res}</h4>\r\n            ))\r\n          : null}\r\n      </div>\r\n\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React, {useEffect,useState} from \"react\";\r\nimport UserTable from \"./UserTable\";\r\nimport Relation from \"./Relation\";\r\nimport Result from \"./Result\";\r\nimport {Route} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nfunction HomePage() {\r\n\r\n    const [userList, setUserList] = useState([]);\r\n    const [relationList, setRelationList] = useState([]);\r\n\r\n    const [usersTableBtn,setUsersTableBtn]=useState(false);\r\n    const [relationBtn,setRelationBtn]=useState(false);\r\n    const [resultBtn,setResultBtn]=useState(false);\r\n    \r\n    \r\n  const [result, setResult] = useState(null);\r\n    useEffect(() => {\r\n        axios\r\n        .get(\"http://localhost:8080/users\")\r\n        .then(res=>setUserList(res.data))\r\n        .catch(err=>console.log(err));\r\n    });\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"homepage\">\r\n        <Button onClick={()=>{\r\n          setUsersTableBtn(true);\r\n          setRelationBtn(false);\r\n          setResultBtn(false);\r\n        }\r\n        }>Users</Button>\r\n        <Button onClick={()=>{\r\n          setUsersTableBtn(false);\r\n          setRelationBtn(true);\r\n          setResultBtn(false);\r\n        }}>Relations</Button>\r\n        <Button onClick={()=>{\r\n          setResultBtn(true);\r\n          setUsersTableBtn(false);\r\n          setRelationBtn(false);\r\n          }}>Find Relation</Button>   \r\n        {usersTableBtn?\r\n        (\r\n        <div>\r\n          <Route to=\"/\" render={()=><UserTable userList={userList} setUserList={setUserList}/>}/>\r\n        </div>\r\n        ):null}\r\n        \r\n        {\r\n          relationBtn?(\r\n        <div>\r\n          <Route to=\"/\" render={()=><Relation relationList={relationList} setRelationList={setRelationList}/>}/>\r\n        </div>\r\n          ):null\r\n        }\r\n        \r\n        {\r\n          resultBtn?(\r\n        <Route to=\"/\" render={()=><Result result={result} setResult={setResult}/>}/>\r\n          ):null\r\n        }\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomePage;","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Navbar expand=\"lg\" style={{backgroundColor:\"#00112c\" , color:\"white\"}}>\r\n      <Navbar.Brand href=\"#home\" style={{ color:\"white\"}}>Relationship Builder</Navbar.Brand>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\nimport HomePage from './components/HomePage';\nimport NavBar from './components/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}